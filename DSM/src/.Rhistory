find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)  # Careful with division by zero if changing lower and upper
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))  # Around c(1.8, 1.5)
hist(x)
library(mixtools)
simulate <- function(lambda=0.3, mu=c(nV_out$param[3],nV_out$param[1] ), sd=c(nV_out$param[4], nV_out$param[2]), n.obs=10^5) {
x1 <- rnorm(n.obs, mu[1], sd[1])
x2 <- rnorm(n.obs, mu[2], sd[2])
return(ifelse(runif(n.obs) < lambda, x1, x2))
}
x <- simulate()
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)  # Careful with division by zero if changing lower and upper
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))  # Around c(1.8, 1.5)
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
x
range(x)
range(nV)
nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
range(nV)
require(cutoff)
plot(density(nV))
require(cutoff)
range(nV)
plot(density(nV))
hist(nV,100,F,xlab="concentration",ylab="density",ylim=c(0,2), main=NULL,col="grey")
hist(nV,100,F,xlab="concentration",ylab="density",ylim=c(0,7), main=NULL,col="grey")
hist(nV,100,F,xlab="concentration",ylab="density",ylim=c(0,0.7), main=NULL,col="grey")
hist(nV,100,F,xlab="concentration",ylab="density",ylim=c(0,0.3), main=NULL,col="grey")
# A kernel density estimation of the distribution:
lines(density(nV),lwd=1.5,col="blue")
# Estimating the parameters of the finite mixture model:
nV_out <- em(nV,"normal","normal")
nV
range(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)  # Careful with division by zero if changing lower and upper
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))  # Around c(1.8, 1.5)
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
cutoffs
mean(cutoffs)
ncc<-edgeList_ncc[,3]
plot(density(ncc))
plot(density(na.omit(sqrt(ncc))))
plot(density(na.omit(log(ncc))))
##pce
pce<-edgeList_pce[,3]
plot(density(pce))
plot(density(sqrt(pce)))
plot(density(log(pce)))
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)  # Careful with division by zero if changing lower and upper
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))  # Around c(1.8, 1.5)
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
rm(list=ls())
source('~/Sherlock4/cluster-analysis/scripts/dataTransformationExploration.R')
library(manipulate)
library(mixtools)
### This is the Ground truth
filelist <-  read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/filelist.txt",sep=" ")
### list of edge list extracted for ncc, pce and pce0
edgeList_ncc <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-ncc.txt",sep=" ")
edgeList_pce <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce.txt",sep=" ")
edgeList_pce0 <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce0.txt",sep=" ")
## density plots with and witout transformation explorations
## ncc
ncc<-edgeList_ncc[,3]
plot(density(ncc))
plot(density(na.omit(sqrt(ncc))))
plot(density(na.omit(log(ncc))))
##pce
pce<-edgeList_pce[,3]
plot(density(pce))
plot(density(sqrt(pce)))
plot(density(log(pce)))
## pce0
pce0<-edgeList_pce0[,3]
plot(density(pce0))
plot(density(sqrt(pce0)))
plot(density(log(pce0)))
## summary of raw data
summary (ncc)
summary (pce)
summary (pce0)
# example only for pce values, log transformed
pce_log<-log(pce)
plot(hist(pce_log,breaks=c(1000)))
#remove outliers from the distribution
nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
#scaling between 0 and 1
#nV<-(nV-min(nV))/(max(nV)-min(nV))
#plot(density(nV))
#boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
cutoffs
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
polygon(c(cut_off[-1],rev(cut_off[-1])),c(0,0,.55,.55), col=rgb(0,0,1,.2),border=NA)
polygon(c(cut_offs[-1],rev(cut_offs[-1])),c(0,0,.55,.55), col=rgb(0,0,1,.2),border=NA)
polygon(c(cutoffs[-1],rev(cutoffs[-1])),c(0,0,.55,.55), col=rgb(0,0,1,.2),border=NA)
cutoff(nV)
lines(nV_out,lwd=1.5,col="red")
lines(nV,lwd=1.5,col="red")
library(manipulate)
library(mixtools)
### This is the Ground truth
filelist <-  read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/filelist.txt",sep=" ")
### list of edge list extracted for ncc, pce and pce0
edgeList_ncc <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-ncc.txt",sep=" ")
edgeList_pce <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce.txt",sep=" ")
edgeList_pce0 <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce0.txt",sep=" ")
## density plots with and witout transformation explorations
## ncc
ncc<-edgeList_ncc[,3]
plot(density(ncc))
plot(density(na.omit(sqrt(ncc))))
plot(density(na.omit(log(ncc))))
##pce
pce<-edgeList_pce[,3]
plot(density(pce))
plot(density(sqrt(pce)))
plot(density(log(pce)))
## pce0
pce0<-edgeList_pce0[,3]
plot(density(pce0))
plot(density(sqrt(pce0)))
plot(density(log(pce0)))
## summary of raw data
summary (ncc)
summary (pce)
summary (pce0)
# example only for pce values, log transformed
pce_log<-log(pce)
plot(hist(pce_log,breaks=c(1000)))
#remove outliers from the distribution
nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
lines(nV,lwd=1.5,col="red")
rm(list=ls())
library(manipulate)
library(mixtools)
### This is the Ground truth
filelist <-  read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/filelist.txt",sep=" ")
### list of edge list extracted for ncc, pce and pce0
edgeList_ncc <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-ncc.txt",sep=" ")
edgeList_pce <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce.txt",sep=" ")
edgeList_pce0 <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce0.txt",sep=" ")
## density plots with and witout transformation explorations
## ncc
ncc<-edgeList_ncc[,3]
plot(density(ncc))
plot(density(na.omit(sqrt(ncc))))
plot(density(na.omit(log(ncc))))
##pce
pce<-edgeList_pce[,3]
plot(density(pce))
plot(density(sqrt(pce)))
plot(density(log(pce)))
## pce0
pce0<-edgeList_pce0[,3]
plot(density(pce0))
plot(density(sqrt(pce0)))
plot(density(log(pce0)))
## summary of raw data
summary (ncc)
summary (pce)
summary (pce0)
# example only for pce values, log transformed
pce_log<-log(pce)
plot(hist(pce_log,breaks=c(1000)))
#remove outliers from the distribution
nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
cutoffs
mean(cutoffs)
exp(mean(cutoffs))
(exp(mean(cutoffs)))^2
library(manipulate)
library(mixtools)
### This is the Ground truth
filelist <-  read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/filelist.txt",sep=" ")
### list of edge list extracted for ncc, pce and pce0
edgeList_ncc <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-ncc.txt",sep=" ")
edgeList_pce <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce.txt",sep=" ")
edgeList_pce0 <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce0.txt",sep=" ")
## density plots with and witout transformation explorations
## ncc
ncc<-edgeList_ncc[,3]
plot(density(ncc))
plot(density(na.omit(sqrt(ncc))))
plot(density(na.omit(log(ncc))))
##pce
pce<-edgeList_pce[,3]
plot(density(pce))
plot(density(sqrt(pce)))
plot(density(log(pce)))
## pce0
pce0<-edgeList_pce0[,3]
plot(density(pce0))
plot(density(sqrt(pce0)))
plot(density(log(pce0)))
## summary of raw data
summary (ncc)
summary (pce)
summary (pce0)
# example only for pce values, log transformed
pce_log<-log(pce)
plot(hist(pce_log,breaks=c(1000)))
nV<-pce_log
#remove outliers from the distribution
#nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
plot(density(x))
model
model$x
pce_log<-log(ncc)
plot(hist(pce_log,breaks=c(1000)))
plot(density(pce_log))
pce_log
plot(density(pce_log))
na.omit(pce_log)
pce_log<-na.omit(pce_log)
nV<-pce_log
#remove outliers from the distribution
#nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
nV<-pce_log
#remove outliers from the distribution
nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
cutoffs
exp(mean(cutoffs))
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
length(pce_log)
length(nV)
length(pce_log)-length(nV)
length(pce_log)
ls
library(pcalg)
install.packages("pcalg")
install.packages("pcalg",depend=TRUE)
install.packages("RBGL",depend=TRUE)
library(pcalg)
library("pcalg")
data(gmG)
source("http://www.bioconductor.org/biocLite.R")
biocLite("pcalg",depend=TRUE)
q()
path<-read.table("http://downloads.yeastgenome.org/curation/literature/biochemical_pathways.tab")
path<-read.table("http://downloads.yeastgenome.org/curation/literature/biochemical_pathways.tab",sep="\t")
path
path<-read.table("http://downloads.yeastgenome.org/curation/literature/biochemical_pathways.tab",sep="\t",header=TRUE)
biochemical_pathways<-path
head(path)
dim(path)
biochemical_pathways<-read.table("http://downloads.yeastgenome.org/curation/literature/biochemical_pathways.tab",sep="\t",header=FALSE)
library(httr)
library(jsonlite)
install.packages("biomartr")
install.packages("biomartr",depend=TRUE,type="source")
install.packages("biomaRt",depend=TRUE,type="source")
source("http://www.bioconductor.org/biocLite.R")
biocLite("biomaRt",depend=TRUE,type="source")
library(biomaRt)
listMarts()
biocLite("UniProt.ws",depend=TRUE,type="source")
install.packages("RSQLite_0.11.4.tar.gz", repos=NULL)
biocLite("RSQLite_0.11.4.tar.gz",depend=TRUE,type="source")
biocLite("RSQLite",depend=TRUE,type="source")
biocLite("UniProt.ws",depend=TRUE,type="source")
biocLite("UniProt.ws")
q()
library(ontoCAT)
go <- getOntology("http://www.geneontology.org/ontology/obo_format_1_2/gene_ontology_ext.obo")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
purch_json
library(jsonlite)
purch_df <- jsonlite::fromJSON(purch_json, simplifyDataFrame = TRUE)
purch_df
dim(purch_df)
str(purch_df)
s
str(purch_json)
str(purch_df)
df <- jsonlite::fromJSON(purch_json, simplifyDataFrame = TRUE)
df
str(df)
dd<-flatten(df)
dd
str(dd)
library(tibble)
dt<-as_data_frame(dd)
dt
exit
q()
exit
q()
getwd()
setwd("../src")
library(dplyr)
library(tidyr)
library(sqldf)
library(splitstackshape)
library(stringr)
library(compare)
detach(package:RMySQL)
setwd("../src")
library(dplyr)
library(tidyr)
library(sqldf)
library(splitstackshape)
library(stringr)
library(compare)
detach(package:RMySQL)
setwd("~/ODEX4all-UseCases/DSM/src")
getwd()
date()
source("../src/EuretosInfrastructure.R")
options(warn=-1)
yeast_genes<-read.csv("20170119_GeneList_DSM.txt",header=TRUE,sep="\t")
start<-getConceptID(tolower(as.character(yeast_genes[,"SGD_ID"])))
yeast_genes
start<-start[,"EKP_Concept_Id"]
end <- unlist(getResistanceEKPID())
end<-end["content.id"] #EKP ID of resistance to chemicals
end2<- unlist(getButanolID())
end2<-end2["content.id"] # EKP ID of butanol
resistance2Chemicals<-getIndirectRelation(start,end)
start
cat("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',end,']',"}")
start <- paste0('"', paste(start, collapse="\", \""), '"')
start
cat(start)
cat("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',end,']',"}")
template<-fromJSON(template,simplifyVector = FALSE,flatten=TRUE)
template<-paste0("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',end,']',"}")
template<-fromJSON(template,simplifyVector = FALSE,flatten=TRUE)
pr <- POST(url = paste(base_url, query, sep =""),
add_headers('X-token' = token),
body=template,
encode = "json",
accept_json(),verbose())
base_url <- "http://178.63.49.197:8080/spine-ws"
template<-paste0("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',end,']',"}")
template
template<-fromJSON(template,simplifyVector = FALSE,flatten=TRUE)
pr <- POST(url = paste(base_url, query, sep =""),
add_headers('X-token' = token),
body=template,
encode = "json",
accept_json(),verbose())
end
template<-paste0("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',as.character(end),']',"}")
template
template<-paste0("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',as.character(end),']',"}")
template<-fromJSON(template,simplifyVector = FALSE,flatten=TRUE)
pr <- POST(url = paste(base_url, query, sep =""),
add_headers('X-token' = token),
body=template,
encode = "json",
accept_json(),verbose())
template<-cat("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',end,']',"}")
template
template<-paste0("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',end,']',"}")
template
template<-fromJSON(template,simplifyVector = FALSE,flatten=TRUE)
pr <- POST(url = paste(base_url, query, sep =""),
add_headers('X-token' = token),
body=template,
encode = "json",
accept_json(),verbose())
template<-paste("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',end,']',"}")
template<-fromJSON(template,simplifyVector = FALSE,flatten=TRUE)
pr <- POST(url = paste(base_url, query, sep =""),
add_headers('X-token' = token),
body=template,
encode = "json",
accept_json(),verbose())
template<-pasteex("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',end,']',"}")
start
as.character(start)
start<-as.character(start)
template<-paste("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',end,']',"}")
template<-fromJSON(template,simplifyVector = FALSE,flatten=TRUE)
pr <- POST(url = paste(base_url, query, sep =""),
add_headers('X-token' = token),
body=template,
encode = "json",
accept_json(),verbose())
template<-paste("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',start,']',",",'"rightInputs":[',as.character(end),']',"}")
template<-fromJSON(template,simplifyVector = FALSE,flatten=TRUE)
pr <- POST(url = paste(base_url, query, sep =""),
add_headers('X-token' = token),
body=template,
encode = "json",
accept_json(),verbose())
