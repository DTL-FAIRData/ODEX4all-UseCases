return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)  # Careful with division by zero if changing lower and upper
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))  # Around c(1.8, 1.5)
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
cutoffs
mean(cutoffs)
ncc<-edgeList_ncc[,3]
plot(density(ncc))
plot(density(na.omit(sqrt(ncc))))
plot(density(na.omit(log(ncc))))
##pce
pce<-edgeList_pce[,3]
plot(density(pce))
plot(density(sqrt(pce)))
plot(density(log(pce)))
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)  # Careful with division by zero if changing lower and upper
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))  # Around c(1.8, 1.5)
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
rm(list=ls())
source('~/Sherlock4/cluster-analysis/scripts/dataTransformationExploration.R')
library(manipulate)
library(mixtools)
### This is the Ground truth
filelist <-  read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/filelist.txt",sep=" ")
### list of edge list extracted for ncc, pce and pce0
edgeList_ncc <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-ncc.txt",sep=" ")
edgeList_pce <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce.txt",sep=" ")
edgeList_pce0 <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce0.txt",sep=" ")
## density plots with and witout transformation explorations
## ncc
ncc<-edgeList_ncc[,3]
plot(density(ncc))
plot(density(na.omit(sqrt(ncc))))
plot(density(na.omit(log(ncc))))
##pce
pce<-edgeList_pce[,3]
plot(density(pce))
plot(density(sqrt(pce)))
plot(density(log(pce)))
## pce0
pce0<-edgeList_pce0[,3]
plot(density(pce0))
plot(density(sqrt(pce0)))
plot(density(log(pce0)))
## summary of raw data
summary (ncc)
summary (pce)
summary (pce0)
# example only for pce values, log transformed
pce_log<-log(pce)
plot(hist(pce_log,breaks=c(1000)))
#remove outliers from the distribution
nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
#scaling between 0 and 1
#nV<-(nV-min(nV))/(max(nV)-min(nV))
#plot(density(nV))
#boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
cutoffs
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
polygon(c(cut_off[-1],rev(cut_off[-1])),c(0,0,.55,.55), col=rgb(0,0,1,.2),border=NA)
polygon(c(cut_offs[-1],rev(cut_offs[-1])),c(0,0,.55,.55), col=rgb(0,0,1,.2),border=NA)
polygon(c(cutoffs[-1],rev(cutoffs[-1])),c(0,0,.55,.55), col=rgb(0,0,1,.2),border=NA)
cutoff(nV)
lines(nV_out,lwd=1.5,col="red")
lines(nV,lwd=1.5,col="red")
library(manipulate)
library(mixtools)
### This is the Ground truth
filelist <-  read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/filelist.txt",sep=" ")
### list of edge list extracted for ncc, pce and pce0
edgeList_ncc <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-ncc.txt",sep=" ")
edgeList_pce <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce.txt",sep=" ")
edgeList_pce0 <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce0.txt",sep=" ")
## density plots with and witout transformation explorations
## ncc
ncc<-edgeList_ncc[,3]
plot(density(ncc))
plot(density(na.omit(sqrt(ncc))))
plot(density(na.omit(log(ncc))))
##pce
pce<-edgeList_pce[,3]
plot(density(pce))
plot(density(sqrt(pce)))
plot(density(log(pce)))
## pce0
pce0<-edgeList_pce0[,3]
plot(density(pce0))
plot(density(sqrt(pce0)))
plot(density(log(pce0)))
## summary of raw data
summary (ncc)
summary (pce)
summary (pce0)
# example only for pce values, log transformed
pce_log<-log(pce)
plot(hist(pce_log,breaks=c(1000)))
#remove outliers from the distribution
nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
lines(nV,lwd=1.5,col="red")
rm(list=ls())
library(manipulate)
library(mixtools)
### This is the Ground truth
filelist <-  read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/filelist.txt",sep=" ")
### list of edge list extracted for ncc, pce and pce0
edgeList_ncc <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-ncc.txt",sep=" ")
edgeList_pce <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce.txt",sep=" ")
edgeList_pce0 <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce0.txt",sep=" ")
## density plots with and witout transformation explorations
## ncc
ncc<-edgeList_ncc[,3]
plot(density(ncc))
plot(density(na.omit(sqrt(ncc))))
plot(density(na.omit(log(ncc))))
##pce
pce<-edgeList_pce[,3]
plot(density(pce))
plot(density(sqrt(pce)))
plot(density(log(pce)))
## pce0
pce0<-edgeList_pce0[,3]
plot(density(pce0))
plot(density(sqrt(pce0)))
plot(density(log(pce0)))
## summary of raw data
summary (ncc)
summary (pce)
summary (pce0)
# example only for pce values, log transformed
pce_log<-log(pce)
plot(hist(pce_log,breaks=c(1000)))
#remove outliers from the distribution
nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
hist(x)
abline(v=cutoffs, col=c("red", "blue"), lty=2)
cutoffs
mean(cutoffs)
exp(mean(cutoffs))
(exp(mean(cutoffs)))^2
library(manipulate)
library(mixtools)
### This is the Ground truth
filelist <-  read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/filelist.txt",sep=" ")
### list of edge list extracted for ncc, pce and pce0
edgeList_ncc <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-ncc.txt",sep=" ")
edgeList_pce <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce.txt",sep=" ")
edgeList_pce0 <- read.table("/home/anandgavai/Sherlock3/cluster-analysis/data/pentax/edgelist-pentax-pce0.txt",sep=" ")
## density plots with and witout transformation explorations
## ncc
ncc<-edgeList_ncc[,3]
plot(density(ncc))
plot(density(na.omit(sqrt(ncc))))
plot(density(na.omit(log(ncc))))
##pce
pce<-edgeList_pce[,3]
plot(density(pce))
plot(density(sqrt(pce)))
plot(density(log(pce)))
## pce0
pce0<-edgeList_pce0[,3]
plot(density(pce0))
plot(density(sqrt(pce0)))
plot(density(log(pce0)))
## summary of raw data
summary (ncc)
summary (pce)
summary (pce0)
# example only for pce values, log transformed
pce_log<-log(pce)
plot(hist(pce_log,breaks=c(1000)))
nV<-pce_log
#remove outliers from the distribution
#nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
plot(density(x))
model
model$x
pce_log<-log(ncc)
plot(hist(pce_log,breaks=c(1000)))
plot(density(pce_log))
pce_log
plot(density(pce_log))
na.omit(pce_log)
pce_log<-na.omit(pce_log)
nV<-pce_log
#remove outliers from the distribution
#nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
nV<-pce_log
#remove outliers from the distribution
nV<-pce_log[!pce_log %in% boxplot.stats(pce_log)$out]
boxplot(nV)
x<-nV
model <- normalmixEM(x=x, k=2)
index.lower <- which.min(model$mu)  # Index of component with lower mean
find.cutoff <- function(proba=0.5, i=index.lower) {
## Cutoff such that Pr[drawn from bad component] == proba
f <- function(x) {
proba - (model$lambda[i]*dnorm(x, model$mu[i], model$sigma[i]) /
(model$lambda[1]*dnorm(x, model$mu[1], model$sigma[1]) + model$lambda[2]*dnorm(x, model$mu[2], model$sigma[2])))
}
return(uniroot(f=f, lower= as.numeric(quantile(x,0.05)), upper=as.numeric(quantile(x,0.95)))$root)
}
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
cutoffs
exp(mean(cutoffs))
cutoffs <- c(find.cutoff(proba=0.5), find.cutoff(proba=0.75))
length(pce_log)
length(nV)
length(pce_log)-length(nV)
length(pce_log)
ls
library(pcalg)
install.packages("pcalg")
install.packages("pcalg",depend=TRUE)
install.packages("RBGL",depend=TRUE)
library(pcalg)
library("pcalg")
data(gmG)
source("http://www.bioconductor.org/biocLite.R")
biocLite("pcalg",depend=TRUE)
q()
path<-read.table("http://downloads.yeastgenome.org/curation/literature/biochemical_pathways.tab")
path<-read.table("http://downloads.yeastgenome.org/curation/literature/biochemical_pathways.tab",sep="\t")
path
path<-read.table("http://downloads.yeastgenome.org/curation/literature/biochemical_pathways.tab",sep="\t",header=TRUE)
biochemical_pathways<-path
head(path)
dim(path)
biochemical_pathways<-read.table("http://downloads.yeastgenome.org/curation/literature/biochemical_pathways.tab",sep="\t",header=FALSE)
library(httr)
library(jsonlite)
install.packages("biomartr")
install.packages("biomartr",depend=TRUE,type="source")
install.packages("biomaRt",depend=TRUE,type="source")
source("http://www.bioconductor.org/biocLite.R")
biocLite("biomaRt",depend=TRUE,type="source")
library(biomaRt)
listMarts()
biocLite("UniProt.ws",depend=TRUE,type="source")
install.packages("RSQLite_0.11.4.tar.gz", repos=NULL)
biocLite("RSQLite_0.11.4.tar.gz",depend=TRUE,type="source")
biocLite("RSQLite",depend=TRUE,type="source")
biocLite("UniProt.ws",depend=TRUE,type="source")
biocLite("UniProt.ws")
q()
library(ontoCAT)
go <- getOntology("http://www.geneontology.org/ontology/obo_format_1_2/gene_ontology_ext.obo")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
purch_json
library(jsonlite)
purch_df <- jsonlite::fromJSON(purch_json, simplifyDataFrame = TRUE)
purch_df
dim(purch_df)
str(purch_df)
s
str(purch_json)
str(purch_df)
df <- jsonlite::fromJSON(purch_json, simplifyDataFrame = TRUE)
df
str(df)
dd<-flatten(df)
dd
str(dd)
library(tibble)
dt<-as_data_frame(dd)
dt
exit
q()
exit
q()
getwd()
setwd("../src")
library(dplyr)
library(tidyr)
library(sqldf)
library(splitstackshape)
library(stringr)
library(compare)
detach(package:RMySQL)
setwd("../src")
paste("{",'"queryString":"term:',"'c0089147'",'","searchType":"STRING"',"}",sep="")
cat("{",'"queryString":"term:',"'c0089147'",'","searchType":"STRING"',"}",sep="")
load("resistance2Chemicals.rda")
setwd("~/ODEX4all-UseCases/DSM/src")
source("../src/EuretosInfrastructure.R")
load("resistance2Chemicals.rda")
dfs1<-as.matrix(getTableFromJson(resistance2Chemicals))
dfs1
dfs1<- data.frame(dfs1, stringsAsFactors=FALSE)
load("resistance2Butanol.rda")
dfs2<-as.matrix(getTableFromJson(resistance2Butanol))
dfs2<- data.frame(dfs2, stringsAsFactors=FALSE)
comparison <- compare(dfs1,dfs2,allowAll=TRUE)
dfs<-comparison$tM
comparison <- compare(dfs1,dfs2,allowAll=TRUE)
library(dplyr)
library(tidyr)
library(sqldf)
library(splitstackshape)
library(stringr)
library(compare)
detach(package:RMySQL)
comparison <- compare(dfs1,dfs2,allowAll=TRUE)
dfs<-comparison$tM
dfs
pred<-read.csv("Reference_Predicate_List.csv",header=TRUE)
pred<-pred[,c(2,3)]
colnames(pred)<-c("pred","names")
subject_name<-getConceptName(dfs[,"Subject"])
dfs<-cbind(dfs,subject_name[,2])
object_name<-getConceptName(dfs[,"Object"])
dfs<-cbind(dfs,object_name[,2])
predicate_name<-sqldf('select * from dfs left join pred on pred.pred=dfs.Predicate')
pbs<-getPubMedId(dfs$Publications)
tripleName<-cbind(subject_name[,"name"],as.character(predicate_name[,"names"]),object_name[,"name"],dfs[,"Publications"],dfs[,"Score"])
colnames(tripleName)<-c("Subject","Predicate","Object","Provenance","Score")
tripleName
head(tripleName)
dfs
dfs
head(dfs)
dfs[1282,]
cat("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',554235,']',",",'"rightInputs":[',5886311,']',"}")
end <- unlist(getResistanceEKPID())
end<-end["content.id"] #EKP ID of resistance to chemicals
end
cat("{",'"additionalFields": ["publicationIds", "tripleIds", "predicateIds", "semanticCategory", "semanticTypes", "taxonomies"]',",",'"positiveFilters":["sc:Chemicals & Drugs","sc:Genes & Molecular Sequences","sc:Physiology"]',",",'"leftInputs":[',554235,']',",",'"rightInputs":[',5886311,']',"}")
getIndirectRelation(,5886311)
getIndirectRelation("554235","5886311")
at<-getIndirectRelation("554235","5886311")
at
at<-as.matrix(getTableFromJson(at))
at
at<-getIndirectRelation("554235","5886311")
at<-as.matrix(getTableFromJson(at))
traceback()
at<-getIndirectRelation(start="554235",end="5886311")
at
at<-as.matrix(getTableFromJson(at))
at
at<-getIndirectRelation("554235","5886311")
library(dplyr)
library(tidyr)
library(sqldf)
library(splitstackshape)
library(stringr)
library(compare)
detach(package:RMySQL)
## Objective: To identify genotype-phenotype trait association in Rice
### Develop a workflow to identify genes indirectly associated with rice traits (Grain Size, Grain number etc) using EKP and visualize them in an interactive knowledge graph.
#### qtaro.abr.affrc.go.jp/qtab/table
setwd("~/ODEX4all-UseCases/Bayer/data")
source("..//src/EuretosInfrastructure.R")
options(warn=-1)
rice_genes <-read.csv("GeneInformationTable_Qtaro_Selected.csv",header=TRUE)
### Select only morphological trait as these are associated with concept ids are dynamic (snapsnot date: 08-05-2017)
### "grain size" (EKP concept id : 5899980)
### "grain thickness" (EKP concept id  :5900661)
### "grain number" (EKP concept id (rice specific) :4343608)
### "kernel number" (EKP concept id:5900190)
### "GRNB" (EKP concept:5900394)
### "fruit number" (EKP concept:5900077)
### "grain number per plant" (EKP concept (exact): 5900828)
### "GN" (EKP concept:(vague many hits within EKP))
rice_genes <- select(rice_genes,locus_id)
#rice_genes <- filter(rice_genes, character_major == "Morphological trait")
rice_genes <- tolower(as.character(rice_genes[,"locus_id"]))
rice_genes <- unique(rice_genes)
rice_genes <- rice_genes[!is.na(rice_genes)]
rice_genes <-rice_genes[rice_genes != "-"]
## Step 1a : Get the starting concept identifiers
start<-getConceptID(rice_genes)
start<-start[,"EKP_Concept_Id"]
## Step 1b: Get the ending concept identifiers for various traits as represented
traits<-c("TO:0000590","TO:0000382","TO:0000396","TO:0000397","TO:0000734","TO:0000402","TO:0002759","TO:0000447")
#                                                "5899980"
#traits<-c("grain number","grain size","grain weight","seed yield","grain length","grain width")
### Trait ekp ids
end<-NULL
for (i in 1:length(traits)){
tmp <- getTraitEKPID(traits[i])
tmpContent<-cbind(traits[i],tmp)
end<-rbind(end,tmpContent)
}
end<-end[,c(2,3,4)]
colnames(end)<-c("TOid","TOEKPid","TOContentName")
head(end)
### Step 2: Get indirect relationship for connected traits
## for the traits that are exists within EKP
genes2Trait<-getIndirectRelation(start,end[c(3,7,8),"TOEKPid"])
save(genes2Trait, file = "genes2Trait.rda")
## Step 2a: Get Indirect relationships with "Trait Neighbours"(end)
## grain size testing
neig<-read.csv("NeighbouringTraitEKPid.csv",stringsAsFactors = FALSE,header=TRUE)
genes2TraitNeighbours<-getIndirectRelation(start,end[c(3,7,8),"TOEKPid"])
save(genes2TraitNeighbours, file = "genes2TraitNeighbours.rda")
Trait2TraitNeighbours<-getIndirectRelation(neig[,1],neig[,2])
start
end
genes2TraitsDirect<-getIndirectRelation(start,end[,"TOEKPid"])
save(genes2TraitsDirect, file = "genes2TraitsDirect.rda")
load("genes2Trait.rda")
load("genes2TraitNeighbours.rda")
load("Traits_and_their_neighbours.rda")
load("genes2TraitsDirect.rda")
load("genes2Trait.rda")
load("genes2TraitNeighbours.rda")
load("Traits_and_their_neighbours.rda")
load("genes2TraitsDirect.rda")
genes2Trait<-as.matrix(getTableFromJson(genes2Trait))
genes2TraitNeighbours<-as.matrix(getTableFromJson(genes2TraitNeighbours))
Traits_and_their_neighbours<-as.matrix(getTableFromJson(a))
genes2TraitsDirect <- as.matrix(getTableFromJson(genes2TraitsDirect))
dfs<-data.frame(unique(rbind(genes2Trait,genes2TraitNeighbours,Traits_and_their_neighbours,genes2TraitsDirect)))
dfs
pred<-pred[,c(2,3)]
pred<-read.csv("Reference_Predicate_List.csv",header=TRUE)
pred<-pred[,c(2,3)]
colnames(pred)<-c("pred","names")
subject_name<-getConceptName(dfs[,"Subject"])
dfs<-cbind(dfs,subject_name[,1])
object_name<-getConceptName(dfs[,"Object"])
dfs<-cbind(dfs,object_name[,1])
predicate_name<-sqldf('select * from dfs left join pred on pred.pred=dfs.Predicate')
pbs<-getPubMedId(dfs$Publications)
tripleName<-cbind(subject_name,as.character(predicate_name[,"names"]),object_name,pbs,as.character(dfs[,"Score"]))
colnames(tripleName)<-c("Subject","Predicate","Object","Provenance","Score")
tripleName
